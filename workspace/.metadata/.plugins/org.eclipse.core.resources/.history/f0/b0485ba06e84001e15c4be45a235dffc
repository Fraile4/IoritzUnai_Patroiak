package gui;

import java.util.ResourceBundle;

import javax.swing.table.AbstractTableModel;

import domain.ApustuAnitza;
import domain.Apustua;
import domain.Registered;

public class RegisteredAdapter extends AbstractTableModel{

	private static final long serialVersionUID = 1L;
	protected Registered erabiltzailea;
	protected String[] zutabeInfo = new String [] {ResourceBundle.getBundle("Etiquetas").getString("Event"),
			ResourceBundle.getBundle("Etiquetas").getString("Question"),
			ResourceBundle.getBundle("Etiquetas").getString("Date"),
			ResourceBundle.getBundle("Etiquetas").getString("Bet"} + "(â‚¬)"};
	
	public RegisteredAdapter(Registered erabiltzailea) {
		this.erabiltzailea = erabiltzailea;
	}
	
	public String getColumnName(int columnIndex) {
		return zutabeInfo[columnIndex];
	}
	
	public int getRowCount() {
		return erabiltzailea.getApustuAnitzak().size();
	}
	
	public int getColumnCount() {
		return 4;
	}
	
	public String getValueAt(int rowIndex, int columnIndex) {
		
		
		Apustua bet = getBetInTable(rowIndex);
		if(columnIndex==0) {
			return bet.getKuota().getQuestion().getEvent().getDescription();
		}else if(columnIndex==1) {
			return bet.getKuota().getQuestion().getQuestion();
		}else if(columnIndex==2) {
			return bet.getApustuAnitza().getData().toLocaleString();
			
		}else if(columnIndex==3) {
			return bet.getKuota().getQuote().toString();
		}else {
			return null;
		}	

	}
	
	public Apustua getBetInTable(int rowIndex) {
		int totalBets = 0;
	    
	    for (ApustuAnitza apustuAnitza : erabiltzailea.getApustuAnitzak()) {
	        for (Apustua apustua : apustuAnitza.getApustuak()) {
	            if (totalBets == rowIndex) {
	                return apustua;
	            }
	            totalBets++;
	        }
	    }

	    return null;
	}
}
